import pandas as pd
import xgboost as xgb
from sklearn.model_selection import train_test_split
from scipy.stats import zscore
import matplotlib.pyplot as plt

# Reading the CSV from the specified location
df = pd.read_csv(r'C:\Users\Looter\Downloads\literally1984.csv')

# Preprocessing the DataFrame
df.columns = df.columns.str.strip()
df['Date'] = pd.to_datetime(df['Date'])

# Select data from 2007 onwards
df = df[df['Date'].dt.year >= 2007]

# Calculate the 21-day exponential moving average and the distance to it
df['21_EMA'] = df['Last'].ewm(span=21, adjust=False).mean()
df['Distance_21_EMA'] = df['Last'] - df['21_EMA']

# Time spent above or below the EMA, time spent in relative proximity (0.5% of the EMA)
df['Above_EMA'] = df['Last'] > df['21_EMA']
df['Below_EMA'] = df['Last'] < df['21_EMA']
df['Near_EMA'] = abs(df['Last'] - df['21_EMA']) < 0.005 * df['21_EMA']

df['Days_Above_EMA'] = df['Above_EMA'].groupby((df['Above_EMA'] != df['Above_EMA'].shift()).cumsum()).cumcount()
df['Days_Below_EMA'] = df['Below_EMA'].groupby((df['Below_EMA'] != df['Below_EMA'].shift()).cumsum()).cumcount()
df['Days_Near_EMA'] = df['Near_EMA'].groupby((df['Near_EMA'] != df['Near_EMA'].shift()).cumsum()).cumcount()

# Calculate the forward 5-day return
df['Fwd_5_Day_Return'] = df['Last'].shift(-5) / df['Last'] - 1

# Drop the rows with NaN values generated by the moving average and return calculations
df = df.dropna()

# Define the features and target
X = df[['Last', 'Distance_21_EMA', 'Days_Above_EMA', 'Days_Below_EMA', 'Days_Near_EMA']]
y = df['Fwd_5_Day_Return']

# Standardize the features using z-score
X = X.apply(zscore)

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create the XGBoost model
model = xgb.XGBRegressor(objective='reg:squarederror')

# Fit the model
model.fit(X_train, y_train)

# Predict the forward 5-day returns
df['Predicted_Fwd_5_Day_Return'] = model.predict(X)

# Categorize the predicted 5-day return into 'bull', 'bear', or 'sideways'
df['Predicted_Regime'] = pd.cut(df['Predicted_Fwd_5_Day_Return'], bins=[-float('inf'), -0.01, 0.01, float('inf')], labels=['bear', 'sideways', 'bull'])

# Visualization
plt.figure(figsize=(15, 5))
for regime, color in zip(['bull', 'bear', 'sideways'], ['green', 'red', 'blue']):
    subset = df[df['Predicted_Regime'] == regime]
    plt.scatter(subset['Date'].values, subset['Last'].values, c=color, label=regime, s=10)
plt.legend()
plt.title('Predicted Market Regimes Based on 5-Day Forward Return')
plt.show()
# Categorize the true 5-day return into 'bull', 'bear', or 'sideways'
y_test_class = pd.cut(y_test, bins=[-float('inf'), -0.01, 0.01, float('inf')], labels=['bear', 'sideways', 'bull'])

# Predict the forward 5-day returns for the test set
y_pred_reg = model.predict(X_test)

# Categorize the predicted 5-day return into 'bull', 'bear', or 'sideways'
y_pred_class = pd.cut(y_pred_reg, bins=[-float('inf'), -0.01, 0.01, float('inf')], labels=['bear', 'sideways', 'bull'])

# Print the classification report
print(classification_report(y_test_class, y_pred_class))

# Visualization
years = df['Date'].dt.year.unique()
for year in years:
    plt.figure(figsize=(15, 5))
    subset_year = df[df['Date'].dt.year == year]
    for regime, color in zip(['bull', 'bear', 'sideways'], ['green', 'red', 'blue']):
        subset_regime = subset_year[subset_year['Predicted_Regime'] == regime]
        plt.scatter(subset_regime['Date'].values, subset_regime['Last'].values, c=color, label=regime, s=20)  # Increased dot size
    
    # Add price line
    plt.plot(subset_year['Date'].values, subset_year['Last'].values, color='black', label='Price')
    
    plt.legend()
    plt.title('Predicted Market Regimes for year {} Based on 5-Day Forward Return'.format(year))
    plt.show()

# Create new columns to store the counts of 'bear', 'bull', and 'sideways' regimes within a 5-day window
for regime in ['bear', 'bull', 'sideways']:
    df[regime + '_Window_5'] = (df['Predicted_Regime'] == regime).rolling(window=5).sum()

# Calculate the return after each instance of at least 3 'bear', 'bull', and 'sideways' regimes within a 5-day window
average_returns = {}
for regime in ['bear', 'bull', 'sideways']:
    df_regime_3 = df[df[regime + '_Window_5'] >= 3]
    df_regime_3['Return_After_' + regime + '_3'] = df_regime_3['Last'].shift(-5) / df_regime_3['Last'] - 1
    average_returns[regime] = df_regime_3['Return_After_' + regime + '_3'].mean()

# Print the average returns
for regime, average_return in average_returns.items():
    print(f"Average 5-day return after at least 3 '{regime}' regimes within 5 days: ", average_return)

